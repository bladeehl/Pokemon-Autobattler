package com.github.bladeehl.ui;

import com.github.bladeehl.io.IOContext;
import com.github.bladeehl.model.Trainer;
import com.github.bladeehl.services.PokemonService;
import com.github.bladeehl.services.BattleService;
import com.github.bladeehl.utils.InputUtils;
import com.github.bladeehl.utils.OutputUtils;
import com.github.bladeehl.exceptions.UnsupportedPokemonTypeException;
import lombok.extern.slf4j.Slf4j;
import lombok.NonNull;
import lombok.val;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class BattleUI {
    final BattleService battleService;
    final PokemonService pokemonService;
    final IOContext io;
    final InputUtils inputUtils;
    final OutputUtils outputUtils;

    public void startBattle(final @NonNull Trainer trainer) {
        val pokemons = pokemonService.getByTrainer(trainer);

        if (!trainer.canBattle()) {
            log.warn("–ú–µ–Ω—å—à–µ –¥–≤—É—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤");
            io.out().println("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –±–æ—è.");
            return;
        }

        io.out().println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤—É—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è –±–∏—Ç–≤—ã:");
        outputUtils.printPokemons(pokemons);

        val firstIndex = inputUtils.promptForInt("–ü–µ—Ä–≤—ã–π –ø–æ–∫–µ–º–æ–Ω: ") - 1;
        val secondIndex = inputUtils.promptForInt("–í—Ç–æ—Ä–æ–π –ø–æ–∫–µ–º–æ–Ω: ") - 1;

        if (firstIndex == secondIndex
            || firstIndex < 0
            || secondIndex < 0
            || firstIndex >= pokemons.size()
            || secondIndex >= pokemons.size()) {

            log.warn(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è –±–∏—Ç–≤—ã: first={}, second={}",
                firstIndex + 1,
                secondIndex + 1);

            io.out().println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤. –ë–æ–π –æ—Ç–º–µ–Ω—ë–Ω.");
            return;
        }

        val firstPokemon = pokemons.get(firstIndex);
        val secondPokemon = pokemons.get(secondIndex);

        io.out().printf("""
            
            ‚öîÔ∏è –ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!
            %s VS %s
            ‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è‚öîÔ∏è
            %n%n""",
            firstPokemon.getName(),
            secondPokemon.getName());

        battleService.startBattle(firstPokemon, secondPokemon);

        while (!battleService.isBattleOver()) {
            val playablePokemon = battleService.getCurrentPlayablePokemon();
            val opponentPokemon = battleService.getCurrentOpponentPokemon();

            io.out().printf("""
                üéÆ –•–æ–¥: %s
                1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å
                2. –ó–∞—â–∏—Ç–∏—Ç—å—Å—è
                3. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
                4. –°–ø–µ—Ü. –∞—Ç–∞–∫–∞
                5. –ó–∞—â–∏—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
                6. –≠–≤–æ–ª—é—Ü–∏—è
                """, playablePokemon.getName());

            val choice = inputUtils.promptForInt("–í—ã–±–æ—Ä: ");

            switch (choice) {
                case 1 -> {
                    val dmg = battleService.attack(playablePokemon, opponentPokemon);
                    io.out().printf(
                        "üí• %s –∞—Ç–∞–∫–æ–≤–∞–ª %s –Ω–∞ %d —É—Ä–æ–Ω–∞%n",
                        playablePokemon.getName(),
                        opponentPokemon.getName(),
                        dmg);
                }
                case 2 -> {
                    battleService.defend(playablePokemon);
                    io.out().printf("üõ°Ô∏è %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∑–∞—â–∏—Ç—É%n",
                        playablePokemon.getName());
                }
                case 3 -> {
                    val gain = battleService.useAbility(playablePokemon);
                    io.out().printf("‚ú® %s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (+%d HP)%n",
                        playablePokemon.getName(),
                        gain);
                }
                case 4 -> {
                    try {
                        val dmg = battleService.specialAttack(playablePokemon, opponentPokemon);
                        io.out().printf("üî• –°–ø–µ—Ü. –∞—Ç–∞–∫–∞ –Ω–∞–Ω–µ—Å–ª–∞ %d —É—Ä–æ–Ω–∞%n", dmg);
                    } catch (UnsupportedPokemonTypeException thrown) {
                        log.error("–û—à–∏–±–∫–∞ —Å–ø–µ—Ü. –∞—Ç–∞–∫–∏", thrown);
                        io.out().println("–û—à–∏–±–∫–∞: " + thrown.getMessage());
                    }
                }
                case 5 -> {
                    try {
                        battleService.defensiveAbility(playablePokemon);
                        io.out().println("üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.");
                    } catch (UnsupportedPokemonTypeException thrown) {
                        log.error("–û—à–∏–±–∫–∞ –∑–∞—â–∏—Ç–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", thrown);
                        io.out().println("–û—à–∏–±–∫–∞: " + thrown.getMessage());
                    }
                }
                case 6 -> {
                    battleService.evolve(playablePokemon);
                    io.out().println("üÜô –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
                }
                default -> io.out().println("‚õî –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.");
            }

            io.out().printf(
                "üìä %s (HP: %d) vs %s (HP: %d)%n%n",
                firstPokemon.getName(),
                firstPokemon.getHealth(),
                secondPokemon.getName(),
                secondPokemon.getHealth());

            battleService.nextTurn();
        }

        val winner = battleService.getWinner();

        io.out().printf("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: %s!%n", winner.getName());
    }
}
