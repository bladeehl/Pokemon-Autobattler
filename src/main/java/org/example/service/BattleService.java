package org.example.service;

import lombok.val;
import org.example.dao.PokemonDAO;
import org.example.models.*;

import java.util.Scanner;

public class BattleService {

    private final Scanner scanner = new Scanner(System.in);

    public void startBattle(final Trainer trainer) {
        val pokemons = PokemonDAO.getPokemonsByTrainer(trainer);

        if (pokemons.size() < 2) {
            System.out.println("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è –±–æ—è.");
            return;
        }

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤—É—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤ –¥–ª—è –±–∏—Ç–≤—ã:");
        for (int index = 0; index < pokemons.size(); index++) {
            val pokemon = pokemons.get(index);
            System.out.printf("%d - %s (%s, HP: %d)\n", index + 1, pokemon.getName(),
                pokemon.getClass().getSimpleName(), pokemon.getHealth());
        }

        System.out.print("–ü–µ—Ä–≤—ã–π –ø–æ–∫–µ–º–æ–Ω: ");
        val firstPokemonIndex = safeIntInput() - 1;
        System.out.print("–í—Ç–æ—Ä–æ–π –ø–æ–∫–µ–º–æ–Ω: ");
        val secondPokemonIndex = safeIntInput() - 1;

        if (firstPokemonIndex == secondPokemonIndex || firstPokemonIndex < 0 || secondPokemonIndex < 0
            || firstPokemonIndex >= pokemons.size() || secondPokemonIndex >= pokemons.size()) {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            return;
        }

        val firstPokemon = pokemons.get(firstPokemonIndex);
        val secondPokemon = pokemons.get(secondPokemonIndex);

        System.out.printf("\n‚öîÔ∏è –ë–∏—Ç–≤–∞: %s VS %s ‚öîÔ∏è\n", firstPokemon.getName(), secondPokemon.getName());

        var turnCounter = 0;
        while (firstPokemon.getHealth() > 0 && secondPokemon.getHealth() > 0) {
            val attacker = (turnCounter % 2 == 0) ? firstPokemon : secondPokemon;
            val defender = (turnCounter % 2 == 0) ? secondPokemon : firstPokemon;

            System.out.printf("\nüéÆ –•–æ–¥: %s\n", attacker.getName());
            System.out.println("1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å");
            System.out.println("2. –ó–∞—â–∏—Ç–∏—Ç—å—Å—è");
            System.out.println("3. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å");
            System.out.println("4. –°–ø–µ—Ü. –∞—Ç–∞–∫–∞");
            System.out.println("5. –ó–∞—â–∏—Ç–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å");
            System.out.println("6. –≠–≤–æ–ª—é—Ü–∏—è");
            System.out.print("–í—ã–±–æ—Ä: ");
            val userChoice = scanner.next();

            switch (userChoice) {
                case "1" -> {
                    val defenderHealthBeforeAttack = defender.getHealth();
                    attacker.attack(defender);
                    System.out.printf("üí• %s –∞—Ç–∞–∫–æ–≤–∞–ª %s –Ω–∞ %d —É—Ä–æ–Ω–∞\n",
                        attacker.getName(), defender.getName(),
                        defenderHealthBeforeAttack - defender.getHealth());
                }
                case "2" -> {
                    attacker.defend();
                    System.out.printf("üõ°Ô∏è %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∑–∞—â–∏—Ç—É\n", attacker.getName());
                }
                case "3" -> {
                    val attackerHealthBeforeAbility = attacker.getHealth();
                    attacker.ability();
                    val healthGained = attacker.getHealth() - attackerHealthBeforeAbility;
                    System.out.printf("‚ú® %s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (+%d HP)\n", attacker.getName(), healthGained);
                }
                case "4" -> {
                    if (attacker instanceof FirePokemon firePokemon) {
                        val defenderHealthBeforeSpecial = defender.getHealth();
                        firePokemon.fireBall(defender);
                        System.out.printf("üî• Fire Ball! –ù–∞–Ω–µ—Å–µ–Ω–æ %d —É—Ä–æ–Ω–∞\n",
                            defenderHealthBeforeSpecial - defender.getHealth());
                    } else if (attacker instanceof WaterPokemon waterPokemon) {
                        val defenderHealthBeforeSpecial = defender.getHealth();
                        waterPokemon.waveAttack(defender);
                        System.out.printf("üåä Wave Attack! –ù–∞–Ω–µ—Å–µ–Ω–æ %d —É—Ä–æ–Ω–∞\n",
                            defenderHealthBeforeSpecial - defender.getHealth());
                    } else {
                        System.out.println("–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∞—Ç–∞–∫–∏.");
                    }
                }
                case "5" -> {
                    if (attacker instanceof FirePokemon firePokemon) {
                        firePokemon.fireThorns();
                        System.out.println("üî• Fire Thorns –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    } else if (attacker instanceof WaterPokemon waterPokemon) {
                        waterPokemon.waterHide();
                        System.out.println("üåä Water Hide –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    } else {
                        System.out.println("–ù–µ—Ç –∑–∞—â–∏—Ç–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.");
                    }
                }
                case "6" -> {
                    attacker.evolve();
                    System.out.println("üÜô –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
                }
                default -> System.out.println("‚õî –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.");
            }

            System.out.printf("üìä %s (HP: %d) vs %s (HP: %d)\n",
                firstPokemon.getName(), firstPokemon.getHealth(),
                secondPokemon.getName(), secondPokemon.getHealth());

            turnCounter++;
        }

        val winner = (firstPokemon.getHealth() > 0) ? firstPokemon : secondPokemon;
        System.out.printf("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: %s!\n", winner.getName());
    }

    private int safeIntInput() {
        try {
            return Integer.parseInt(scanner.next());
        } catch (NumberFormatException thrown) {
            return -1;
        }
    }
}
